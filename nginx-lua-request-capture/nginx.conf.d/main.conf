server
{
    listen 80;
  # This will make sure that any changes to the lua code file is picked up
  # without reloading or restarting nginx
  # lua_code_cache off;
  #    server_name test.example.com;
set $resp_body '';

        location / {
         # content_by_lua_file lua/append2.lua;

         proxy_pass_request_body on;
         proxy_request_buffering on;
 
         client_max_body_size 50k;
         client_body_buffer_size 50k;
        lua_need_request_body on;

            rewrite_by_lua_block {
               local json = require('cjson')
               ngx.req.read_body()  -- explicitly read the req body
               local data = ngx.req.get_body_data()

            -- Construct data tables
                -- Body/incoming request data
                local tableWithData = json.decode(data) 
                -- Data to be appended to body table
                local tableToAppend = { 
                    client_ip = ngx.var.realip_remote_addr
                }
                -- Merge 2 tables
                    t1 = tableWithData
                    t2 = tableToAppend
                    function tableMerge(t1, t2)
                    for k,v in pairs(t2) do
                        if type(v) == "table" then
                            if type(t1[k] or false) == "table" then
                                tableMerge(t1[k] or {}, t2[k] or {})
                            else
                                t1[k] = v
                            end
                        else
                            t1[k] = v
                        end
                    end
                    end
                    tableMerge(t1, t2) 
                -- End merge
            -- To able print results we need to encode
            local tableWithData = json.encode (tableWithData)
            local tableToAppend = json.encode (tableToAppend)
            -- Set new body
            ngx.req.set_body_data(tableWithData)
             }


  
                proxy_pass http://logger_nginx_1:80/; 

    }  
      
}
