server {
  listen 80;
  # This will make sure that any changes to the lua code file is picked up
  # without reloading or restarting nginx
  lua_code_cache off;

#  set $response_body '';  
  set $resp_body '';

# body_filter_by_lua_block {
#   -- arg[1] contains a chunk of response content
#   local resp_body = string.sub(ngx.arg[1], 1, 1000) 
#   ngx.log(ngx.CRIT, "Got body as " .. resp_body) 
#   ngx.ctx.buffered = string.sub((ngx.ctx.buffered or "") .. resp_body, 1, 1000)
#   -- arg[2] is true if this is the last chunk
#   if ngx.arg[2] then
#     ngx.var.response_body = ngx.ctx.buffered
#   end
# }
 lua_need_request_body on;
#
#    set $resp_body "";
#    body_filter_by_lua '
#      local resp_body = string.sub(ngx.arg[1], 1, 1000)
#      ngx.log(ngx.CRIT, "Got body as " .. resp_body) 
#      ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
#      if ngx.arg[2] then
#        ngx.var.resp_body = ngx.ctx.buffered
#      end
#    ';
#     set_by_lua_block $res { return 32 + math.cos(32) }

    location /bar {
        content_by_lua_block{
            ngx.log(ngx.ERR, 'access ')
            local headers = ngx.req.get_headers()
            for k, v in pairs(headers) do
                ngx.log(ngx.ERR,"headerK = "..k..' value = '..v)
                ngx.say("headerK = "..k..' value = '..v)
            end
   
        }
        
    }
    # this print result: 12.12.0.1
location /myscript {
  content_by_lua_block{
  ngx.print(ngx.req.raw_header(true))
  ngx.print(ngx.req.get_headers()['X-Real-IP'])
  ngx.print(ngx.var.request_body)
  
  }
 
        } 

 location /foo {
     set $my_var ''; # this line is required to create $my_var at config time
     content_by_lua_block {
       local secret = "it's over 9000!"
       local args = ngx.req.get_uri_args()
       local headers = ngx.req.get_headers()
         body = ngx.var.request_body
         ngx.var.my_var = ngx.req.get_headers()['X-Real-IP'];
         ngx.print(ngx.var.request_body)
         ngx.print(body)

  
          local table = {
              "null",
              {"world: ", ngx.req.get_headers()['X-Real-IP'], " or ", ngx.var.request_body,
                  {": ", nil}}
          }
          ngx.print(table)
     }

 }

     location = /test {
     content_by_lua_block {
         ngx.req.read_body()
         local args, err = ngx.req.get_post_args()
         if not args then
             ngx.say("failed to get post args: ", err)
             return
         end
         for key, val in pairs(args) do
             if type(val) == "table" then
                 ngx.say(key, ": ", table.concat(val, ", "))
             else
                 ngx.say(key, ": ", val)
             end
         end
     }
 }
    location /query {
     proxy_pass http://127.0.0.1:8081/;
    set $xyz '';
    body_filter_by_lua_block {
        ngx.var.xyz = '1234'
    }
    echo_after_body $xyz;
    }

    location /main/ {

lua_need_request_body on;
content_by_lua_block {
    ngx.req.init_body(128 * 1024)  -- buffer is 128KB
    for chunk in next_data_chunk() do
        ngx.req.append_body(chunk) -- each chunk can be 4KB
    end
    ngx.req.finish_body()
}
}
     location /body {
        content_by_lua_block {
            ngx.req.read_body()
            local body=ngx.req.get_body_data()
            ngx.req.init_body()
            ngx.req.append_body('some string transformed by body')
            ngx.req.append_body("\n" .. chunk)
            ngx.print(ngx.req.read_body())
            ngx.req.finish_body()
        }
        proxy_pass http://127.0.0.1:8081/;
    }
     location = /request_body {
         client_max_body_size 50k;
         client_body_buffer_size 50k;

         content_by_lua_block {
             ngx.req.read_body()  -- explicitly read the req body
             local data = ngx.req.get_body_data()
             if data then
                 ngx.say("body data:")
                 ngx.print(data)
                 return
             end

             -- body may get buffered in a temp file:
             local file = ngx.req.get_body_file()
             if file then
                 ngx.say("body is in file ", file)
             else
                 ngx.say("no body found")
             end
         }
     }

location /da {
    proxy_pass http://127.0.0.1:8081/;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_connect_timeout 150;
    proxy_send_timeout 100;
    proxy_read_timeout 100;
    proxy_buffers 4 32k;
    client_max_body_size 8m;
    client_body_buffer_size 128k;
    set $foo '1234';
    rewrite_by_lua '
        cjson = require "cjson"
        ngx.req.read_body()
        body_table = cjson.decode(ngx.var.request_body)
        ngx.var.foo = body_table["foo"]
        
    ';

  #  access_log /var/log/nginx/access.log mylogfmt;
}

  location / {
    proxy_pass http://127.0.0.1:8081/;
#    log_by_lua_file lua/request_logger.lua;
 
    #log_by_lua_block {
    #  ngx.log(ngx.CRIT, "See if this message comes")
    #}
  }
}

server {
  listen 8081;

  location / {
     add_header Content-Type "text/html";
     echo "$request_method $uri $args";
  }
}
